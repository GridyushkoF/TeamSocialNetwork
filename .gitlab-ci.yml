stages:          # List of stages for jobs, and their order of execution
  - compile
  - test
  - deploy_docker_frontend
  - deploy_docker_services
  - deploy_prod

cache:
  paths:
    - .m2/repository
  key: "$CI_COMMIT_SHA"

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  MAVEN_OPTS_CLI: "--batch-mode --fail-at-end --show-version"

compile-job:       # This job runs in the compile stage, which runs first.
 stage: compile
 script:
   - echo "Compiling the code..."
   - mvn clean compile $MAVEN_OPTS_CLI -DskipTests

unit-test-job:   # This job runs in the test stage.
 stage: test    # It only starts when the job in the build stage completes successfully.
 script:
   - echo "Running unit tests..."
   - mvn test $MAVEN_OPTS_CLI

#lint-test-job:   # This job also runs in the test stage.
#  stage: test    # It can run at the same time as unit-test-job (in parallel).
#  script:
#    - echo "Linting code..."
#    - mvn checkstyle:checkstyle $MAVEN_OPTS_CLI -Dcheckstyle.output.format=xml
##    - cat target/checkstyle-result.xml

deploy_docker_frontend-job:      # This job runs in the deploy_docker_frontend stage.
  stage: deploy_docker_frontend  # It only runs when *both* jobs in the test stage complete successfully.
  #  only:
  #  - develop
  script:
    - echo "Deploying frontend..."
    - docker image rm skillboxgroup/frontend:latest
    - docker build -f ./frontend/Dockerfile -t "skillboxgroup/frontend" ./frontend
    - echo "Pushing frontend image to docker hub..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin
    - docker push "skillboxgroup/frontend" --all-tags

deploy_docker_services-job:      # This job runs in the deploy_docker_services stage.
  stage: deploy_docker_services  # It only runs when *both* jobs in the test stage complete successfully.
#  only:
#  - develop
  script:
    - echo "Deploying application..."
    - docker image rm skillboxgroup/discovery:0.0.1-SNAPSHOT
    - docker image rm skillboxgroup/authentication:0.0.1-SNAPSHOT
    - docker image rm skillboxgroup/user-service:0.0.1-SNAPSHOT
    - docker image rm skillboxgroup/post-service:0.0.1-SNAPSHOT
    - docker image rm skillboxgroup/dialog-service:0.0.1-SNAPSHOT
    - docker image rm skillboxgroup/notification-service:0.0.1-SNAPSHOT
    - docker image rm skillboxgroup/admin-service:0.0.1-SNAPSHOT
    - docker image rm skillboxgroup/geo-service:0.0.1-SNAPSHOT
    - docker image rm skillboxgroup/gateway:0.0.1-SNAPSHOT
    - mvn clean package $MAVEN_OPTS_CLI -DskipTests
    - echo "Pushing service images to docker hub..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin
    - docker push "skillboxgroup/discovery" --all-tags
    - docker push "skillboxgroup/authentication" --all-tags
    - docker push "skillboxgroup/user-service" --all-tags
    - docker push "skillboxgroup/post-service" --all-tags
    - docker push "skillboxgroup/dialog-service" --all-tags
    - docker push "skillboxgroup/notification-service" --all-tags
    - docker push "skillboxgroup/gateway" --all-tags
    - docker push "skillboxgroup/admin-service" --all-tags
    - docker push "skillboxgroup/geo-service" --all-tags

deploy_prod-job:      # This job runs in the deploy_prod stage.
  stage: deploy_prod  # It only runs when *both* jobs in the test stage complete successfully.
  #  only:
  #  - develop
  before_script:
    - which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $PROD_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp -r ./docker $PROD_USER@$PROD_HOST:~
    - ssh $PROD_USER@$PROD_HOST "docker compose -f ./docker/docker-compose.yml -f ./docker/docker-compose.services.yml down"
    - ssh $PROD_USER@$PROD_HOST "docker image rm skillboxgroup/discovery:0.0.1-SNAPSHOT"
    - ssh $PROD_USER@$PROD_HOST "docker image rm skillboxgroup/authentication:0.0.1-SNAPSHOT"
    - ssh $PROD_USER@$PROD_HOST "docker image rm skillboxgroup/user-service:0.0.1-SNAPSHOT"
    - ssh $PROD_USER@$PROD_HOST "docker image rm skillboxgroup/post-service:0.0.1-SNAPSHOT"
    - ssh $PROD_USER@$PROD_HOST "docker image rm skillboxgroup/dialog-service:0.0.1-SNAPSHOT"
    - ssh $PROD_USER@$PROD_HOST "docker image rm skillboxgroup/notification-service:0.0.1-SNAPSHOT"
    - ssh $PROD_USER@$PROD_HOST "docker image rm skillboxgroup/admin-service:0.0.1-SNAPSHOT"
    - ssh $PROD_USER@$PROD_HOST "docker image rm skillboxgroup/geo-service:0.0.1-SNAPSHOT"
    - ssh $PROD_USER@$PROD_HOST "docker image rm skillboxgroup/gateway:0.0.1-SNAPSHOT"
    - ssh $PROD_USER@$PROD_HOST "docker compose -f ./docker/docker-compose.yml -f ./docker/docker-compose.services.yml up"
