stages:
  - compile
  - test
  - sonarqube-check
  - deploy_docker_frontend
  - deploy_docker_services
  - deploy_prod

cache:
  paths:
    - .m2/repository
  key: "$CI_COMMIT_SHA"

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  MAVEN_OPTS_CLI: "--batch-mode --fail-at-end --show-version"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task

compile-job:
 stage: compile
 script:
   - echo "Compiling the code..."
   - mvn clean compile $MAVEN_OPTS_CLI -DskipTests

unit-test-job:
 stage: test
 script:
   - echo "Running unit tests..."
   - mvn test $MAVEN_OPTS_CLI

sonarqube-check-job:
  stage: sonarqube-check
  dependencies:
    - compile-job
    - unit-test-job
  cache:
    policy: pull
    key: "${CI_COMMIT_SHORT_SHA}"
    paths:
      - sonar-scanner/

  script:
    - mvn verify sonar:sonar $MAVEN_OPTS_CLI
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_BRANCH == 'develop'

deploy_docker_frontend-job:
  stage: deploy_docker_frontend
  only:
  - develop
  script:
    - echo "Deploying frontend..."
    - docker image rm skillboxgroup/frontend:latest
    - docker build --no-cache -f ./frontend/Dockerfile -t "skillboxgroup/frontend" ./frontend
    - echo "Pushing frontend image to docker hub..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin
    - docker push "skillboxgroup/frontend" --all-tags

deploy_docker_services-job:
  stage: deploy_docker_services
  only:
    - develop
  script:
    - echo "Removing service images..."
    - docker image rm skillboxgroup/discovery:0.0.1-SNAPSHOT
    - docker image rm skillboxgroup/authentication:0.0.1-SNAPSHOT
    - docker image rm skillboxgroup/user-service:0.0.1-SNAPSHOT
    - docker image rm skillboxgroup/post-service:0.0.1-SNAPSHOT
    - docker image rm skillboxgroup/dialog-service:0.0.1-SNAPSHOT
    - docker image rm skillboxgroup/notification-service:0.0.1-SNAPSHOT
    - docker image rm skillboxgroup/admin-service:0.0.1-SNAPSHOT
    - docker image rm skillboxgroup/geo-service:0.0.1-SNAPSHOT
    - docker image rm skillboxgroup/gateway:0.0.1-SNAPSHOT
    - mvn clean package $MAVEN_OPTS_CLI -DskipTests
    - echo "Pushing service images to docker hub..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin
    - docker push "skillboxgroup/discovery" --all-tags
    - docker push "skillboxgroup/authentication" --all-tags
    - docker push "skillboxgroup/user-service" --all-tags
    - docker push "skillboxgroup/post-service" --all-tags
    - docker push "skillboxgroup/dialog-service" --all-tags
    - docker push "skillboxgroup/notification-service" --all-tags
    - docker push "skillboxgroup/gateway" --all-tags
    - docker push "skillboxgroup/admin-service" --all-tags
    - docker push "skillboxgroup/geo-service" --all-tags

deploy_prod-job:
  stage: deploy_prod
  only:
    - develop
  before_script:
    - which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $PROD_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp -r ./docker $PROD_USER@$PROD_HOST:~
    - ssh $PROD_USER@$PROD_HOST "docker compose -f ./docker/docker-compose.yml -f ./docker/docker-compose.services.yml down"
    - ssh $PROD_USER@$PROD_HOST "docker image rm skillboxgroup/discovery:0.0.1-SNAPSHOT"
    - ssh $PROD_USER@$PROD_HOST "docker image rm skillboxgroup/authentication:0.0.1-SNAPSHOT"
    - ssh $PROD_USER@$PROD_HOST "docker image rm skillboxgroup/user-service:0.0.1-SNAPSHOT"
    - ssh $PROD_USER@$PROD_HOST "docker image rm skillboxgroup/post-service:0.0.1-SNAPSHOT"
    - ssh $PROD_USER@$PROD_HOST "docker image rm skillboxgroup/dialog-service:0.0.1-SNAPSHOT"
    - ssh $PROD_USER@$PROD_HOST "docker image rm skillboxgroup/notification-service:0.0.1-SNAPSHOT"
    - ssh $PROD_USER@$PROD_HOST "docker image rm skillboxgroup/admin-service:0.0.1-SNAPSHOT"
    - ssh $PROD_USER@$PROD_HOST "docker image rm skillboxgroup/geo-service:0.0.1-SNAPSHOT"
    - ssh $PROD_USER@$PROD_HOST "docker image rm skillboxgroup/gateway:0.0.1-SNAPSHOT"
    - ssh $PROD_USER@$PROD_HOST "docker image rm skillboxgroup/frontend:latest"
    - ssh $PROD_USER@$PROD_HOST "docker compose -f ./docker/docker-compose.yml -f ./docker/docker-compose.services.yml up -d"
